;; sicp 2.65

(load "sicp-2.63.ss")
(load "sicp-2.64.ss")

(define (union-set set1 set2)
  (define (help-union l1 l2)
    (cond ((null? l1) l2)
          ((null? l2) l1)
          ((not (element-of-set? (car l1) l2))
           (cons (car l1)
                 (help-union (cdr l1) l2)))
          (else (help-union (cdr l1) l2))))
  (let ((list1 (tree-list-2 set1))
        (list2 (tree-list-2 set2)))
    (let ((union-list (help-union list1 list2)))
      (list-tree union-list))))

(define (intersection-set set1 set2)
  (define (help-intersection l1 l2)
    (cond ((or (null? l1)
               (null? l2)) '())
          ((element-of-set? (car l1) l2)
           (cons (car l1)
                 (help-intersection (cdr l1) l2)))
          (else (help-intersection (cdr l1) l2))))
  (let ((list1 (tree-list-2 set1))
        (list2 (tree-list-2 set2)))
    (let ((intersection-list (help-intersection list1 list2)))
      (list-tree intersection-list))))
