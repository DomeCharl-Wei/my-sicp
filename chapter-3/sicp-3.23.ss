;; deque
(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-deque?)
      (null? front-ptr))
    (define (front-deque)
      (if (empty-deque?)
          (error "empty deque")
          (car front-ptr)))
    (define (rear-deque)
      (if (empty-deque?)
          (error "empty deque")
          (car rear-ptr)))
    (define (front-insert-deque! item)
      (let ((new-pair (cons item
                            (cons '() '()))))
        (if (empty-deque?)
            (begin
              (set! front-ptr new-pair)
              (set! rear-ptr new-pair))
            (begin
              (set-cdr! (cdr new-pair) front-ptr)
              (set-car! (cdr front-ptr) new-pair)
              (set! front-ptr new-pair)))))
    (define (rear-insert-deque! item)
      (let ((new-pair (cons item
                            (cons '() '()))))
        (if (empty-deque?)
            (begin
              (set! front-ptr new-pair)
              (set! rear-ptr new-pair))
            (begin
              (set-car! (cdr new-pair) rear-ptr)
              (set-cdr! (cdr rear-ptr) new-pair)
              (set! rear-ptr new-pair)))))
    (define (delete-front-deque!)
      (if (empty-deque?)
          (error "empty deque")
          (begin
            (set! front-ptr (cdr (cdr front-ptr)))
            (set-car! (cdr front-ptr) '()))))
    (define (delete-rear-deque!)
      (if (empty-deque?)
          (error "empty deque")
          (begin
            (set! rear-ptr (car (cdr rear-ptr)))
            (set-cdr! (cdr rear-ptr) '()))))
    (define (dispatch m)
      (cond ((eq? 'empty-deque?) empty-deque?)
            ((eq? 'front-deque) front-deque)
            ((eq? 'rear-deque) rear-deque)
            ((eq? 'front-insert-deque!) front-insert-deque!)
            ((eq? 'rear-insert-deque!) rear-insert-deque!)
            ((eq? 'delete-front-deque!) delete-front-deque!)
            ((eq? 'delte-rear-deque!) delete-rear-deque!)
            (else (error "unsupported method " m))))
    dispatch))
